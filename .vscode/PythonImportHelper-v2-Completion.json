[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "sqlite3",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlite3",
        "description": "sqlite3",
        "detail": "sqlite3",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "check_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "server.myenv.Scripts.activate_this",
        "description": "server.myenv.Scripts.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "server.myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "server.myenv.Scripts.activate_this",
        "description": "server.myenv.Scripts.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"Scripts\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]",
        "detail": "server.myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "server.myenv.Scripts.activate_this",
        "description": "server.myenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir] + os.environ.get(\"PATH\", \"\").split(os.pathsep))\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "server.myenv.Scripts.activate_this",
        "description": "server.myenv.Scripts.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "server.myenv.Scripts.activate_this",
        "description": "server.myenv.Scripts.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"..\\Lib\\site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "server.myenv.Scripts.activate_this",
        "description": "server.myenv.Scripts.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "server.myenv.Scripts.activate_this",
        "description": "server.myenv.Scripts.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "server.myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "server.myenv.Scripts.activate_this",
        "description": "server.myenv.Scripts.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "server.myenv.Scripts.activate_this",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "server.app",
        "description": "server.app",
        "peekOfCode": "def index():\n    members = {'members': ['Member1', 'Member2', 'Member3']}\n    return members\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    print(request.is_ajax())\n    if request.method == 'POST':\n        connection = sqlite3.connect(current_dir + '\\\\rain.db')\n        cur = connection.cursor()\n        request = request.get_json()",
        "detail": "server.app",
        "documentation": {}
    },
    {
        "label": "register",
        "kind": 2,
        "importPath": "server.app",
        "description": "server.app",
        "peekOfCode": "def register():\n    print(request.is_ajax())\n    if request.method == 'POST':\n        connection = sqlite3.connect(current_dir + '\\\\rain.db')\n        cur = connection.cursor()\n        request = request.get_json()\n        email = request['email']\n        print('email: ' + email)\n        # TODO get name from form.get\n        #name = \"bob\"",
        "detail": "server.app",
        "documentation": {}
    },
    {
        "label": "error_return",
        "kind": 2,
        "importPath": "server.app",
        "description": "server.app",
        "peekOfCode": "def error_return(error):\n    return ('An error has occured: ' + str(error))\nif __name__ == '__main__':\n    app.run(debug=True)",
        "detail": "server.app",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "server.app",
        "description": "server.app",
        "peekOfCode": "app = Flask(__name__)\ncurrent_dir = os.path.dirname(os.path.abspath(__file__))\n@app.route('/members')\ndef index():\n    members = {'members': ['Member1', 'Member2', 'Member3']}\n    return members\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    print(request.is_ajax())\n    if request.method == 'POST':",
        "detail": "server.app",
        "documentation": {}
    },
    {
        "label": "current_dir",
        "kind": 5,
        "importPath": "server.app",
        "description": "server.app",
        "peekOfCode": "current_dir = os.path.dirname(os.path.abspath(__file__))\n@app.route('/members')\ndef index():\n    members = {'members': ['Member1', 'Member2', 'Member3']}\n    return members\n@app.route('/register', methods=['GET', 'POST'])\ndef register():\n    print(request.is_ajax())\n    if request.method == 'POST':\n        connection = sqlite3.connect(current_dir + '\\\\rain.db')",
        "detail": "server.app",
        "documentation": {}
    },
    {
        "label": "my_profile",
        "kind": 2,
        "importPath": "server.base",
        "description": "server.base",
        "peekOfCode": "def my_profile():\n    response_body = {\n        \"name\": \"Nagato\",\n        \"about\" :\"Hello! I'm a full stack developer that loves python and javascript\"\n    }\n    return response_body",
        "detail": "server.base",
        "documentation": {}
    },
    {
        "label": "api",
        "kind": 5,
        "importPath": "server.base",
        "description": "server.base",
        "peekOfCode": "api = Flask(__name__)\n@api.route('/profile')\ndef my_profile():\n    response_body = {\n        \"name\": \"Nagato\",\n        \"about\" :\"Hello! I'm a full stack developer that loves python and javascript\"\n    }\n    return response_body",
        "detail": "server.base",
        "documentation": {}
    }
]